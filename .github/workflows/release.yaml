name: Release
on:
  push:
    branches:
    - workflow_release
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
    - 'v[0-9]+.[0-9]+.[0-9]+'
    - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'
    - 'v[0-9]+.[0-9]+.[0-9]+-alpha'
    - 'v[0-9]+.[0-9]+.[0-9]+-beta'
jobs:
  release:
    name: release
    runs-on: ubuntu-latest
    steps:
    - name: Get the branch and tag
      id: info
      run: |
        branch="${GITHUB_REF#refs/heads/}"
        echo "branch: $branch"
        if [[ "$branch" == "workflow_release" ]]; then
          version="TEST-0.0.0"
          draft="true"
        else
          version="${GITHUB_REF#refs/tags/}"
          draft="false"
        fi
        date=$(env TZ=':America/Los_Angeles' date +'%Y-%m-%d')
        echo "version: $version, draft: $draft, date: $date"
        echo "version=$version" >> $GITHUB_OUTPUT
        echo "draft=$draft" >> $GITHUB_OUTPUT
        echo "date=$date" >> $GITHUB_OUTPUT
      shell: bash

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0.x'

    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Create staging dir
      id: staging
      run: |
        staging="Mech3DotNet-${{ steps.info.outputs.version }}"
        mkdir "$staging"
        cp {README.md,LICENSE} "$staging/"
        echo "staging=$staging" >> $GITHUB_OUTPUT
      shell: bash

    - name: Run dotnet restore
      run: dotnet restore
      shell: bash

    - name: Run dotnet build
      id: build
      run: >
        dotnet build
        --no-incremental
        --no-restore
        --configuration "Release"
        --output "${{ steps.staging.outputs.staging }}"
        Mech3DotNet
      shell: bash

    - name: Package archives
      id: package
      run: |
        tar czvf "${{ steps.staging.outputs.staging }}.tar.gz" "${{ steps.staging.outputs.staging }}"
        7z a "${{ steps.staging.outputs.staging }}.zip" "${{ steps.staging.outputs.staging }}"
      shell: bash

    - name: Create GitHub release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.info.outputs.version }}
        release_name: ${{ steps.info.outputs.version }} (${{ steps.info.outputs.date }})
        draft: ${{ steps.info.outputs.draft }}

    - name: Upload tar archive
      id: upload_tar
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: "${{ steps.staging.outputs.staging }}.tar.gz"
        asset_name: "${{ steps.staging.outputs.staging }}.tar.gz"
        asset_content_type: application/octet-stream

    - name: Upload zip archive
      id: upload_zip
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: "${{ steps.staging.outputs.staging }}.zip"
        asset_name: "${{ steps.staging.outputs.staging }}.zip"
        asset_content_type: application/octet-stream
