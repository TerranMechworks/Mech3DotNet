name: Release

on:
  push:
    branches:
    - workflow_release
    tags:
    - 'v[0-9]+.[0-9]+.[0-9]+'
    - 'v[0-9]+.[0-9]+.[0-9]+'
    - 'v[0-9]+.[0-9]+.[0-9]+-rc[0-9]+'
    - 'v[0-9]+.[0-9]+.[0-9]+-alpha'
    - 'v[0-9]+.[0-9]+.[0-9]+-beta'

jobs:
  release:
    name: release
    runs-on: ubuntu-latest
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write
      id-token: write
      contents: write
    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Get release information
        id: info
        run: |
          ref_name='${{ github.ref_name }}'
          echo "ref_name: $ref_name"

          # is this a test release, or a real release?
          if [[ "$ref_name" == 'workflow_release' ]]; then
            version='v0.0.0-test'
            target_commitish='${{ github.sha }}'
          else
            version="$ref_name"
            target_commitish=''
          fi
          echo "version: $version"
          echo "target_commitish: $target_commitish"

          # is this a pre-release (-rc*, -alpha, -beta, -test)?
          if [[ "$version" == *"-"* ]]; then
            prerelease='true'
          else
            prerelease='false'
          fi
          echo "prerelease: $prerelease"

          date=$(env TZ=':America/Los_Angeles' date +'%Y-%m-%d')
          echo "date: $date"

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "target_commitish=$target_commitish" >> $GITHUB_OUTPUT
          echo "date=$date" >> $GITHUB_OUTPUT
          echo "prerelease=$prerelease" >> $GITHUB_OUTPUT
        shell: bash

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - name: Install documentation tool
        run: dotnet tool update -g docfx
        shell: bash

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create staging dir
        id: staging
        run: |
          staging='Mech3DotNet-${{ steps.info.outputs.version }}'
          mkdir "$staging"
          cp {README.md,LICENSE} "$staging/"
          echo "staging=$staging" >> $GITHUB_OUTPUT
        shell: bash

      - name: Run dotnet restore
        run: dotnet restore
        shell: bash

      - name: Run dotnet build
        id: build
        run: >
          dotnet build
          --no-incremental
          --no-restore
          --configuration 'Release'
          --output '${{ steps.staging.outputs.staging }}'
          Mech3DotNet
        shell: bash

      - name: Package archives
        id: package
        run: |
          tar czvf '${{ steps.staging.outputs.staging }}.tar.gz' '${{ steps.staging.outputs.staging }}'
          7z a '${{ steps.staging.outputs.staging }}.zip' '${{ steps.staging.outputs.staging }}'
        shell: bash

      - name: Generate documentation
        run: docfx Docs/docfx.json
        shell: bash

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: Docs/_site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2

      - name: Create GitHub release
        id: release
        run: |
          curl \
            --fail \
            --request 'POST' \
            --url '${{ github.api_url }}/repos/${{ github.repository }}/releases' \
            --header 'Accept: application/vnd.github+json' \
            --header 'Authorization: Bearer ${{ github.token }}' \
            --header 'Content-type: application/json' \
            --data '{
              "tag_name": "${{ steps.info.outputs.version }}",
              "target_commitish": "${{ steps.info.outputs.target_commitish }}",
              "name": "${{ steps.info.outputs.version }} (${{ steps.info.outputs.date }})",
              "prerelease": ${{ steps.info.outputs.prerelease }},
              "draft": true
              }' \
            --output 'release.json'
          cat release.json

          upload_url=$(jq -r '.upload_url' release.json)
          upload_url="${upload_url%%'{?name,label}'}"
          echo "upload_url: $upload_url"
          echo "upload_url=$upload_url" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload release tar archive
        run: |
          curl \
            --fail \
            --request 'POST' \
            --url '${{ steps.release.outputs.upload_url }}?name=${{ steps.staging.outputs.staging }}.tar.gz' \
            --header 'Accept: application/vnd.github+json' \
            --header 'Authorization: Bearer ${{ github.token }}' \
            --header 'Content-type: application/octet-stream' \
            --data-binary '@${{ steps.staging.outputs.staging }}.tar.gz'
        shell: bash

      - name: Upload release zip archive
        run: |
          curl \
            --fail \
            --request 'POST' \
            --url '${{ steps.release.outputs.upload_url }}?name=${{ steps.staging.outputs.staging }}.zip' \
            --header 'Accept: application/vnd.github+json' \
            --header 'Authorization: Bearer ${{ github.token }}' \
            --header 'Content-type: application/octet-stream' \
            --data-binary '@${{ steps.staging.outputs.staging }}.zip'
        shell: bash
